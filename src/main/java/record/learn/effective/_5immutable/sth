反之，通过维护自己的对象池（object pool）来避免创建对象并不是一种好的做法，除非池中
的对象是非常重量级的。真正正确使用对象池的典型正确示例就是数据库连接池。建立数据
库连接的代价是非常昂贵的，因此重用这些对象非常有意义。而且，数据库的许可可能限制
你只能使用一定数量的连接。但是，一般而言，维护自己的对象池必定会把代码弄得很乱，
同时增加内存占用（footprint），并且还会损害性能。现代的JVM实现具有高度优化的垃圾回
收器，其性能很容易就会超过轻量级对象池的性能。


//重量级对象可以考虑建立自己的对象池, eg:数据库连接池 线程池,都是因为创建对象的成本比较高