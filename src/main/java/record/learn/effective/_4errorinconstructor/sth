企图通过将类做成抽象类来强制该类不可被实例化，这是行不通的。该类可以被子类化，并
且该子类也可以被实例化。这样做甚至会误导用户，以为这种类是专门为了继承而设计的
（见第17条）。然而，有一些简单习惯用法可以确保类不可被实例化。由于只有当类不包含
显式的构造器时，编译器才会生成缺省的构造器，因此我们只要让这个类包含私有构造器，
它就不能被实例化了：
// Noninstantiable utility class
public class UtilityClass {
// Suppress default constructor for noninstantiability
private UtilityClass() {
throw new AssertionError();
}
... // Remainder omitted
}
由于显式的构造器是私有的，所以不可以在该类的外部访问它。 AssertionError 不是必需
的，但是它可以避免不小心在类的内部调用构造器。它保证该类在任何情况下都不会被实例
化。这种习惯用法有点违背直觉，好像构造器就是专门设计成不能被调用一样。因此，明智
的做法就是在代码中增加一条注释，如上所示。
这种习惯用法也有副作用，它使得一个类不能被子类化。所有的构造器都必须显式或隐式地
调用超类（superclass）构造器，在这种情形下，子类就没有可访问的超类构造器可调用了。